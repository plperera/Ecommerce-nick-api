generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}
model shipping {
  id          Int       @id @default(autoincrement())
  price       Int 
  name        String    @unique
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  isActive    Boolean   @default(true)

  order           order[]
}
model session {
  id          Int       @id @default(autoincrement())
  userId      Int       
  token       String    @unique
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  isActive    Boolean   @default(true)

  user        user?     @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction)
}
model sessionAdmin {
  id              Int       @id @default(autoincrement())
  userAdminId     Int       
  token           String    @unique
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  isActive        Boolean   @default(true)

  userAdmin        userAdmin?     @relation(fields: [userAdminId], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model enrollment {
  id          Int       @id @default(autoincrement())
  userId      Int       @unique
  cpf         String    @unique
  birthday    String
  phone       String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  user        user?     @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model address {
  id              Int        @id @default(autoincrement())
  userId          Int 
  mainAddress     Boolean    @default(true)
  addressName     String
  cep             String
  street          String
  city            String
  state           String
  number          String
  neighborhood    String
  addressDetail   String?   
  isActive        Boolean    @default(true)
  createdAt       DateTime   @default(now())
  updatedAt       DateTime   @updatedAt

  order           order[]
  user            user?     @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model user {
  id        Int         @id @default(autoincrement())
  name      String
  email     String      @unique
  password  String
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt

  session               session[]
  enrollment            enrollment[]
  address               address[]
  order                 order[]
  payment               payment[]
  productFavorite       productFavorite[]
}

model userAdmin {
  id        Int         @id @default(autoincrement())
  name      String
  email     String      @unique
  password  String
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt

  sessionAdmin       sessionAdmin[]
}

model product {
  id                Int         @id @default(autoincrement())
  name              String      @unique
  description       String      
  price             Int         
  stock             Int         
  salesAmount       Int         @default(0)
  isActive          Boolean     @default(true)
  createdAt         DateTime    @default(now())
  updatedAt         DateTime    @updatedAt

  tecnicDetails     tecnicDetails[]
  productCategory   productCategory[]
  productImage      productImage[]
  orderProduct      orderProduct[]
  productFavorite   productFavorite[]
}
model productFavorite {
  id                Int          @id @default(autoincrement())
  productId         Int
  userId            Int

  product           product?     @relation(fields: [productId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  user              user?        @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction)
}
model productCategory {
  id                Int          @id @default(autoincrement())
  productId         Int
  categoryId        Int
  product           product?     @relation(fields: [productId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  category          category?    @relation(fields: [categoryId], references: [id], onDelete: NoAction, onUpdate: NoAction)
}
model productImage {
  id                Int          @id @default(autoincrement())
  productId         Int
  imageId           Int
  mainImage         Boolean      @default(false)
  product           product?     @relation(fields: [productId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  image             image?       @relation(fields: [imageId], references: [id], onDelete: NoAction, onUpdate: NoAction)
}
model category {
  id                Int         @id @default(autoincrement())
  name              String      @unique
  createdAt         DateTime    @default(now())
  updatedAt         DateTime    @updatedAt
  isActive          Boolean     @default(true)

  productCategory   productCategory[]
  homeCategory      homeCategory[]
}
model banner {
  id                Int         @id @default(autoincrement())
  text              String      
  imageId           Int
  createdAt         DateTime    @default(now())
  updatedAt         DateTime    @updatedAt

  image             image?      @relation(fields: [imageId], references: [id], onDelete: NoAction, onUpdate: NoAction)
}
model homeCategory {
  id                Int         @id @default(autoincrement())
  subTitle          String  
  categoryId        Int           
  imageId           Int
  createdAt         DateTime    @default(now())
  updatedAt         DateTime    @updatedAt

  image             image?      @relation(fields: [imageId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  category          category?   @relation(fields: [categoryId], references: [id], onDelete: NoAction, onUpdate: NoAction)
}
model tecnicDetails {
  id                Int         @id @default(autoincrement())
  topic             String 
  topicDetail       String?    
  updatedAt         DateTime    @updatedAt
  productId         Int

  product           product?     @relation(fields: [productId], references: [id], onDelete: NoAction, onUpdate: NoAction)
}
model image {
  id                Int         @id @default(autoincrement())
  imageUrl          String
  imageName         String
  createdAt         DateTime    @default(now())
  updatedAt         DateTime    @updatedAt

  productImage      productImage[]
  banner            banner[]
  homeCategory      homeCategory[]
}
enum OrderStatus {
  PENDING
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
}
model order {
  id                Int             @id @default(autoincrement())
  userId            Int      
  status            String          @default("waiting")
  addressId         Int      
  shippingId        Int
  shippingPrice     Int         
  paymentId         Int         
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt

  orderProduct      orderProduct[]

  user              user?           @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  address           address?        @relation(fields: [addressId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  shipping          shipping?       @relation(fields: [shippingId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  payment           payment?        @relation(fields: [paymentId], references: [id], onDelete: NoAction, onUpdate: NoAction)
}
model payment {
  id                      Int             @id @default(autoincrement())
  userId                  Int
  paymentType             String
  installments            Int
  transactionAmount       Int
  expirationMonth         Int
  expirationYear          Int
  firstSixDigits          String
  lastFourDigits          String
  payerDocumentNumber     String
  payerDocumentType       String
  payerEmail              String
  paymentId               Int
  issuerId                String
  paymentStatus           String
  paymentStatusDetails    String
  idempotency             String
  createdAt               DateTime        @default(now())
  updatedAt               DateTime        @updatedAt

  order                   order[]
  user                    user?           @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction) 
}
model orderProduct {
  id                Int         @id @default(autoincrement())
  orderId           Int      
  productId         Int      
  quantity          Int         
  price             Int         
  createdAt         DateTime    @default(now())

  order             order?      @relation(fields: [orderId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  product           product?    @relation(fields: [productId], references: [id], onDelete: NoAction, onUpdate: NoAction)
}