generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}
model shipping {
  id          Int       @id @default(autoincrement())
  price       Int 
  name        String    @unique
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  isActive    Boolean   @default(true)
}
model session {
  id          Int       @id @default(autoincrement())
  userId      Int       
  token       String    @unique
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  isActive    Boolean   @default(true)

  user        user?     @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction)
}
model sessionAdmin {
  id              Int       @id @default(autoincrement())
  userAdminId     Int       
  token           String    @unique
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  isActive        Boolean   @default(true)

  userAdmin        userAdmin?     @relation(fields: [userAdminId], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model enrollment {
  id          Int       @id @default(autoincrement())
  userId      Int       @unique
  cpf         String    @unique
  birthday    String
  phone       String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  user        user?     @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model address {
  id              Int        @id @default(autoincrement())
  userId          Int 
  mainAddress     Boolean    @default(true)
  cep             String
  street          String
  city            String
  state           String
  number          String
  neighborhood    String
  addressDetail   String?   
  isActive        Boolean    @default(true)
  createdAt       DateTime   @default(now())
  updatedAt       DateTime   @updatedAt

  user        user?     @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model user {
  id        Int         @id @default(autoincrement())
  name      String
  email     String      @unique
  password  String
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt

  session       session[]
  enrollment    enrollment[]
  address       address[]
}

model userAdmin {
  id        Int         @id @default(autoincrement())
  name      String
  email     String      @unique
  password  String
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt

  sessionAdmin       sessionAdmin[]
}

model product {
  id                Int         @id @default(autoincrement())
  name              String      @unique
  description       String      
  price             Int         
  stock             Int         
  salesAmount       Int         
  createdAt         DateTime    @default(now())
  updatedAt         DateTime    @updatedAt

  productCategory   productCategory[]
  productImage      productImage[]

}
model productCategory {
  id                Int          @id @default(autoincrement())
  productId         Int
  categoryId        Int
  product           product?     @relation(fields: [productId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  category          category?    @relation(fields: [categoryId], references: [id], onDelete: NoAction, onUpdate: NoAction)
}
model productImage {
  id                Int          @id @default(autoincrement())
  productId         Int
  imageId           Int
  mainImage         Boolean      @default(false)
  product           product?     @relation(fields: [productId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  image             image?       @relation(fields: [imageId], references: [id], onDelete: NoAction, onUpdate: NoAction)
}
model category {
  id                Int         @id @default(autoincrement())
  name              String      @unique
  createdAt         DateTime    @default(now())
  updatedAt         DateTime    @updatedAt
  isActive          Boolean     @default(true)

  productCategory   productCategory[]
}
model image {
  id                Int         @id @default(autoincrement())
  imageUrl          String
  createdAt         DateTime    @default(now())
  updatedAt         DateTime    @updatedAt

  productImage      productImage[]
}